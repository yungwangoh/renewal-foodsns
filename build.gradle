plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.7'
    id 'io.spring.dependency-management' version '1.1.5'
}

ext {
    springCloudGcpVersion = "5.4.3"
}

group = 'mubex'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.google.cloud:spring-cloud-gcp-starter'
    implementation platform("com.google.cloud:spring-cloud-gcp-dependencies:5.5.0")
    implementation 'com.google.cloud:spring-cloud-gcp-starter-storage'
    implementation platform("io.awspring.cloud:spring-cloud-aws-dependencies:3.0.0")
    // Replace the following with the starter dependencies of specific modules you wish to use
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3'
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    testImplementation 'org.springframework.batch:spring-batch-test'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    // querydsl 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // map struct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    // mysql test-container
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:testcontainers:1.20.0'
    testImplementation 'org.testcontainers:junit-jupiter:1.20.0'
    testImplementation "org.testcontainers:elasticsearch:1.20.0"
    testImplementation 'org.testcontainers:mysql:1.20.0'

    // thumbnail
    implementation 'net.coobird:thumbnailator:0.4.20'

    // https://mvnrepository.com/artifact/io.rest-assured/rest-assured
    testImplementation 'io.rest-assured:rest-assured:5.5.0'

    // data faker
    implementation 'net.datafaker:datafaker:2.3.1'

    // spring retry
    implementation 'org.springframework.retry:spring-retry'

    // https://mvnrepository.com/artifact/com.github.ben-manes.caffeine/caffeine
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'

    // https://mvnrepository.com/artifact/org.jooq/jooq
    implementation 'org.jooq:jooq:3.19.11'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [generated]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}

dependencyManagement {
    imports {
        mavenBom "com.google.cloud:spring-cloud-gcp-dependencies:$springCloudGcpVersion"
    }
}
